// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <behaviors/num_word.dtsi>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap_letters";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        td11: td11 {
            compatible = "zmk,behavior-hold-tap";
            label = "TD11";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&tg1_ru_25>, <&kp>;
        };

        td8: td8 {
            compatible = "zmk,behavior-hold-tap";
            label = "TD8";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&tg0_en_26>, <&kp>;
        };

        sm: sticky_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_MOD";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            quick-release;
            ignore-modifiers;
        };

        backspace_morph: backspace_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_MORPH";
            bindings = <&lt 3 BACKSPACE>, <&lt 3 LA(BACKSPACE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp B>, <&kt C>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12 13>;
            layers = <0 1 4>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
            layers = <0 1 4>;
        };

        tg4 {
            bindings = <&tog 4>;
            key-positions = <31 32>;
            layers = <0 1>;
        };

        cmd {
            bindings = <&kp LEFT_GUI>;
            key-positions = <30 31>;
            layers = <0 1 2>;
        };
    };

    macros {
        tg1_ru_25: tg1_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(N9)>, <&macro_wait_time 50>, <&tog 1>;

            label = "TG1_RU";
        };

        tg0_en_26: tg0_en_26 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(N8)>, <&macro_wait_time 50>, <&tog 1>;

            label = "TG0_EN_26";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Eng {
            bindings = <
&kp Q  &kp W  &kp E  &kp R         &kp T         &kp Y      &kp U             &kp I      &kp O  &td11 0 LS(MINUS)
&kp A  &kp S  &kp D  &kp F         &kp G         &kp H      &kp J             &kp K      &kp L  &num_word 2
&kp Z  &kp X  &kp C  &kp V         &kp B         &kp N      &kp PERIOD        &kp COMMA  &kp M  &kp LS(SLASH)
                     &lt 2 DELETE  &kp LSHIFT    &kp SPACE  &backspace_morph
            >;
        };

        Rus {
            bindings = <
&kp Q               &kp W  &kp E  &kp R         &kp T         &kp Y      &kp U             &kp I                   &kp O       &td8 0 SEMICOLON
&ht LEFT_BRACKET A  &kp S  &kp D  &kp F         &kp G         &kp H      &kp J             &kp K                   &kp L       &ht RIGHT_BRACKET P
&kp Z               &kp X  &kp C  &kp V         &kp B         &kp N      &ht LS(N7) M      &ht LS(NUMBER_6) COMMA  &kp PERIOD  &kp SQT
                                  &lt 2 DELETE  &kp LSHIFT    &kp SPACE  &backspace_morph
            >;
        };

        Num {
            bindings = <
&kp LG(N8)       &kp LS(NUMBER_5)  &kp SLASH        &kp LS(NUMBER_8)  &kp ESCAPE         &kp LA(SPACE)    &kp LS(N9)               &kp EQUAL               &kp LS(N0)       &kp LS(MINUS)
&ht F1 NUMBER_1  &ht F2 NUMBER_2   &ht F3 NUMBER_3  &ht F4 NUMBER_4   &ht F5 NUMBER_5    &ht F6 NUMBER_6  &ht F7 NUMBER_7          &ht F8 NUMBER_8         &ht F9 NUMBER_9  &ht F10 NUMBER_0
&kp F11          &kp LS(NUMBER_4)  &kp MINUS        &kp LS(EQUAL)     &sm LEFT_GUI       &none            &ht LS(NUMBER_7) PERIOD  &ht LS(NUMBER_6) COMMA  &kp LA(H)        &kp F12
                                                    &trans            &kp LEFT_SHIFT     &kp SPACE        &kp BACKSPACE
            >;
        };

        Sym {
            bindings = <
&kp LG(N8)  &kp LS(RIGHT_BRACKET)  &ht LS(PERIOD) LS(COMMA)  &kp LS(LEFT_BRACKET)  &kp BACKSLASH       &kp ENTER         &kp LS(N9)         &kp EQUAL               &kp LS(N0)      &kp LS(MINUS)
&kp LS(N7)  &kp LS(NUMBER_1)       &kp LS(SEMICOLON)         &kp LS(SQT)           &kp SQT             &kp LS(NUMBER_2)  &sm LEFT_GUI       &sm LEFT_ALT            &sm LEFT_SHIFT  &sm LCTRL
&none       &kp RIGHT_BRACKET      &kp SEMICOLON             &kp LEFT_BRACKET      &kp LS(NUMBER_3)    &kp LS(NUMBER_6)  &ht LS(N7) PERIOD  &ht LS(NUMBER_6) COMMA  &none           &kp LS(SLASH)
                                                             &kp DEL               &kp LEFT_SHIFT      &kp SPACE         &trans
            >;
        };

        Nav {
            bindings = <
&bootloader    &bt BT_CLR         &kp LG(GRAVE)                   &kp LG(TAB)              &kp PAGE_UP                &ht LG(RIGHT_BRACKET) LG(LEFT_BRACKET)  &kp LC(RIGHT_BRACKET)  &kp UP         &bt BT_SEL 0                               &bootloader
&kp LG(Z)      &kp LG(X)          &kp LG(C)                       &kp LG(V)                &kp PAGE_DOWN              &kp LC(TAB)                             &kp LEFT               &kp DOWN       &kp RIGHT                                  &bt BT_SEL 1
&kp LC(LG(F))  &kp LC(LA(ENTER))  &ht LA(LC(RIGHT)) LC(LA(LEFT))  &ht LC(LA(J)) LC(LA(U))  &ht LC(LA(K)) LC(LA(I))    &tog 5                                  &kp LC(LEFT)           &kp LC(RIGHT)  &ht LG(LA(NUMBER_3)) LG(LA(LC(NUMBER_3)))  &ht LG(LA(NUMBER_4)) LG(LA(LC(NUMBER_4)))
                                                                  &tog 4                   &kp LEFT_SHIFT             &kp LEFT_GUI                            &kp LEFT_ALT
            >;
        };

        Gam {
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E      &kp R           &kp T  &kp Y   &kp U  &kp I  &kp O
&kp LEFT_SHIFT  &kp A  &kp S  &kp D      &kp F           &kp G  &kp H   &kp J  &kp K  &kp L
&kp LCTRL       &kp Z  &kp X  &kp C      &kp V           &kp B  &kp N   &kp H  &kp M  &kp P
                              &kp SPACE  &lt 2 ESCAPE    &none  &tog 5
            >;
        };
    };
};